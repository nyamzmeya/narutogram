{"version":3,"sources":["common/formscontrols.jsx","common/validation.jsx","common/auth.jsx"],"names":["FormArea","input","meta","touched","error","children","hasError","className","s","formsControl","textArea","props","restProps","child","Input","createField","place","name","component","validate","text","placeholder","requiredField","value","maxLenCreator","maxlen","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","auth_error","connect","state","isAuth","auth","Login","Logout","to","formData","email","password","rememberMe"],"mappings":"0QAIaA,EAAW,SAAC,GAAgD,EAA9CC,MAA+C,IAAD,IAAvCC,KAAQC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACnDC,EAAWH,GAAWC,EAC5B,OACE,sBAAKG,UAAWC,IAAEC,aAAe,KAAOH,EAAWE,IAAEJ,MAAQ,KAA7D,UACGC,EACAC,GAAY,+BAAOF,QAKbM,EAAW,SAACC,GAAW,IAC1BV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MADY,YACYF,EADZ,2BAEjC,OACE,cAACX,EAAD,2BAAcW,GAAd,aACE,oDAAcV,GAAWW,QAKlBE,EAAQ,SAACH,GAAW,IACvBV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MADS,YACeF,EADf,2BAE9B,OACE,cAACX,EAAD,2BAAcW,GAAd,aACE,iDAAWV,GAAWW,QAKfG,EAAc,SAACC,EAAOC,EAAMC,EAAWC,GAAiC,IAAvBR,EAAsB,uDAAhB,GAAIS,EAAY,uDAAP,GAC3E,OACE,gCACE,cAAC,IAAD,aACEC,YAAaL,EACbC,KAAMA,EACNC,UAAWA,EACXC,SAAUA,GACNR,IACHS,O,iCCzCT,oEAAO,IAAME,EAAgB,SAAAC,GACzB,IAAIA,EACJ,MAAO,qBAGEC,EAAgB,SAACC,GAAD,OAAY,SAACF,GACtC,GAAIA,GAASA,EAAMG,OAASD,EAAQ,MAAM,iBAAN,OAAwBA,EAAxB,e,sHCkBlCE,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAhBL,SAAC,GAA0B,IAAzBE,EAAwB,EAAxBA,aAAa1B,EAAW,EAAXA,MAC7B,OACI,uBAAM2B,SAAWD,EAAjB,UACSf,YAAY,QAAS,QAASD,IAAO,CAACQ,MACtCP,YAAY,WAAY,WAAYD,IAAO,CAACQ,KAAgB,CAACU,KAAK,aAClEjB,YAAY,KAAM,aAAcD,IAAO,GAAI,CAACkB,KAAK,YAAa,eACnE,8BACI,6CAEH5B,GAAS,qBAAKG,UAAWC,IAAEyB,WAAlB,SACL7B,UA8BF8B,uBAJS,SAACC,GACrB,MAAO,CAACC,OAAQD,EAAME,KAAKD,UAGS,CAACE,UAAOC,YAAjCL,EApBE,SAACvB,GAMd,OAAIA,EAAMyB,OACC,cAAC,IAAD,CAAUI,GAAK,UAG1B,qBAAKjC,UAAWC,IAAE6B,KAAlB,SACI,cAACV,EAAD,CAAgBI,SATH,SAACU,GACd9B,EAAM2B,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/8.fd8a261b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./common.module.css\";\r\nimport { Field} from 'redux-form'\r\n\r\nexport const FormArea = ({ input, meta : {touched, error}, children}) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={s.formsControl + \" \" + (hasError ? s.error : \" \")}>\r\n      {children}\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const textArea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormArea {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormArea>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormArea {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormArea>\r\n  );\r\n};\r\n\r\nexport const createField = (place, name, component, validate, props={}, text='') => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={place}\r\n        name={name}\r\n        component={component}\r\n        validate={validate}\r\n        {...props}\r\n      />{text}\r\n    </div>\r\n  );\r\n};\r\n","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLenCreator = (maxlen) => (value) => {\r\n    if (value && value.length > maxlen) return `Max length is ${maxlen} symbols`;\r\n    return undefined;\r\n}\r\n\r\n","import s from './common.module.css'\r\nimport {Input, createField} from './formscontrols'\r\nimport {reduxForm } from 'redux-form'\r\nimport { requiredField } from './validation'\r\nimport { connect } from 'react-redux'\r\nimport {Logout, Login} from '../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst LoginForm = ({handleSubmit,error}) => {\r\n    return (\r\n        <form onSubmit= {handleSubmit}>\r\n                {createField('Email', 'email', Input, [requiredField])}\r\n                {createField('Password', 'password', Input, [requiredField], {type:'password'})}\r\n                {createField(null, 'rememberMe', Input, [], {type:'checkbox'}, 'remember me')}    \r\n            <div >\r\n                <button>Login</button>\r\n            </div>\r\n            {error && <div className={s.auth_error}>\r\n                {error}\r\n            </div>}\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n  })(LoginForm)\r\n\r\nconst AuthPage = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.Login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to= {'/main'}/>\r\n    }\r\n    return (\r\n    <div className={s.auth}>\r\n        <LoginReduxForm onSubmit= {onSubmit}/>\r\n    </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport default connect(mapStateToProps, {Login, Logout})(AuthPage);"],"sourceRoot":""}